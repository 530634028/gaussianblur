##############################################################################
Gaussian Blur
##############################################################################

==============================================================================
Getting Started
==============================================================================

::

    $ cd blur
    $ mkdir _build
    $ make all
    $ make cpu
    $ make gpu

==============================================================================
Overview
==============================================================================

Features:

- CPU with OpenMP support
- CPU with PThread support
- CPU and GPU (CUDA) support


==============================================================================
Algorithms
==============================================================================

------------------------------------------------------------------------------
Example
------------------------------------------------------------------------------

::

    image:
        0, 1, 2, 3,
        4, 5, 6, 7,
        8, 9, 10, 11

    kernel: (5, 5)
        0.0232468, 0.033824, 0.0383276, 0.033824, 0.0232468, 
        0.033824, 0.0492136, 0.0557663, 0.0492136, 0.033824,
        0.0383276, 0.0557663, 0.0631915, 0.0557663, 0.0383276,
        0.033824, 0.0492136, 0.0557663, 0.0492136, 0.033824,
        0.0232468, 0.033824, 0.0383276, 0.033824, 0.0232468, 

    image (padded):
        0, 0, 0, 1, 2, 3, 3, 3, 
        0, 0, 0, 1, 2, 3, 3, 3,
        0, 0, 0, 1, 2, 3, 3, 3,
        4, 4, 4, 5, 6, 7, 7, 7,
        8, 8, 8, 9, 10, 11, 11, 11,
        8, 8, 8, 9, 10, 11, 11, 11,
        8, 8, 8, 9, 10, 11, 11, 11,

    image blurred:
        2.6339, 3.25959, 3.95465, 4.58034,
        4.52678, 5.15247, 5.84753, 6.47322,
        6.41966, 7.04535, 7.74041, 8.3661,

------------------------------------------------------------------------------
CPU Implementation
------------------------------------------------------------------------------

Gaussian Kernel Generation

::

    ex = e ^ (-(x * x + y * y) / (2 * sigma * sigma))
    g(x, y) = 1 / 2 * pi * sigma * sigma * ex


1. kernel width

kernel_width = ceil(0.3 * (sigma / 2 - 1) + 0.8) * gauss_window_factor

kernel_width should be odd: (kw % 2 == 0) -> kw++


2. kernel center = kernel_width / 2

3. exp_coeff = - 1.0 / (sigma * sigma * 2)

4. kernel[i]

kernel[center] = 1

kernel[-i] = kernel[i] = i * i * exp_coeff

5. sum[kernel]: sum each kernel

6. factor = 1 / sum

7. final kernel[i] = kernel[i] * fac


Convolution


- by columns



- by rows

------------------------------------------------------------------------------
GPU Implementation
------------------------------------------------------------------------------
